AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: personal-inventory-mngr

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Resources:

  PersonalInventoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tbndr-personal-inven-bucket1232
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        RestrictPublicBuckets: false 

  PersonalInventoryApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PersonalInventoryAPI
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Personal Inventory API"
        paths:
          /get:
            get:
              parameters:
                - name: ID
                  in: query
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetFunction.Arn}/invocations"
                httpMethod: POST
                requestParameters:
                  integration.request.querystring.ID: "method.request.querystring.ID"
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
            options:
              summary: "CORS support"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
              responses:
                "200":
                  description: "200 response for CORS preflight"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string

          /get-all:
            get:
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllFunction.Arn}/invocations"
                httpMethod: POST
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET'"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
            options:
              summary: "CORS support"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
              responses:
                "200":
                  description: "200 response for CORS preflight"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string

          /put:
            put:
              parameters:
                - name: ID
                  in: query
                  required: true
                  type: string
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutFunction.Arn}/invocations"
                httpMethod: POST
                requestParameters:
                  integration.request.querystring.ID: "method.request.querystring.ID"
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
            options:
              summary: "CORS support"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
              responses:
                "200":
                  description: "200 response for CORS preflight"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string


  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: "index.html"
        Origins:
          - DomainName: "tbndr-personal-inven-bucket1232.s3-website.us-east-1.amazonaws.com"
            Id: S3Origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - POST
            - PUT
            - DELETE
            - PATCH
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        PriceClass: PriceClass_100

  GetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  GetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-all/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  GetFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetFunction.Arn
      Principal: apigateway.amazonaws.com

  PutFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PutFunction.Arn
      Principal: apigateway.amazonaws.com

  GetAllFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetAllFunction.Arn
      Principal: apigateway.amazonaws.com

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'personal-inventory'
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: "ID"
          KeyType: "HASH"
      AttributeDefinitions:
        - AttributeName: "ID"
          AttributeType: "S"
