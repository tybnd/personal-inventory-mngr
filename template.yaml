AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: personal-inventory-mngr

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Resources:

  # Personal Inventory API Gateway
  PersonalInventoryApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: PersonalInventoryAPI
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "Personal Inventory API"
          version: "1.0"
        paths:
          /get-all:
            get:
              summary: "Get all items from inventory"
              produces:
                - application/json
              responses:
                '200':
                  description: "Successfully fetched all items"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllFunction.Arn}/invocations"
                httpMethod: POST
                passthroughBehavior: "when_no_match"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                    responseTemplates:
                      application/json: |
                        {
                          "statusCode": 200,
                          "body": $input.json('$.body')
                        }
            options:
              summary: "CORS support"
              responses:
                '200':
                  description: "CORS support"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                      default: "'*'"
                    Access-Control-Allow-Methods:
                      type: string
                      default: "'OPTIONS,POST,GET,PUT'"
                    Access-Control-Allow-Headers:
                      type: string
                      default: "'Content-Type,Authorization'"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                passthroughBehavior: when_no_templates
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"

          /put:
            put:
              summary: "Update item quantity"
              consumes:
                - application/json
              produces:
                - application/json
              parameters:
                - name: ID
                  in: query
                  required: true
                  type: string
                - name: Quantity
                  in: query
                  required: true
                  type: integer
              responses:
                '200':
                  description: "Successfully updated item"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
              x-amazon-apigateway-integration:
                type: aws
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PutFunction.Arn}/invocations"
                httpMethod: POST
                requestParameters:
                  integration.request.querystring.ID: method.request.querystring.ID
                  integration.request.querystring.Quantity: method.request.querystring.Quantity
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"
                    responseTemplates:
                      application/json: |
                        {
                          "statusCode": 200,
                          "body": $input.json('$.body')
                        }
            options:
              summary: "CORS support"
              responses:
                '200':
                  description: "CORS support"
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                      default: "'*'"
                    Access-Control-Allow-Methods:
                      type: string
                      default: "'OPTIONS,POST,GET,PUT'"
                    Access-Control-Allow-Headers:
                      type: string
                      default: "'Content-Type,Authorization'"
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: |
                    {
                      "statusCode": 200
                    }
                passthroughBehavior: when_no_templates
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization'"


  # Lambda for updating item quantities
  PutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: put/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  # Lambda for getting all items
  GetAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: get-all/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  # Permissions for API Gateway to invoke Lambdas
  PutFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PutFunction.Arn
      Principal: apigateway.amazonaws.com

  GetAllFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt GetAllFunction.Arn
      Principal: apigateway.amazonaws.com

  # DynamoDB Table
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: personal-inventory
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # On-demand mode, no need for throughput specs
    DeletionPolicy: Retain  # Optional, retains the table on stack deletion

  # New Lambda for processing AWS resource events
  ResourceEventHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: resource-handler/
      Handler: app.lambda_handler
      Runtime: python3.12
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  # EventBridge Rule for capturing AWS resource events
  AWSResourceEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture AWS resource creation and deletion events
      EventPattern:
        source:
          - "aws.ec2"
          - "aws.s3"
          - "aws.cloudfront"
          - "aws.dynamodb"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventName:
            - "CreateBucket"
            - "RunInstances"
            - "CreateTable"
            - "CreateDistribution"
            - "TerminateInstances"
            - "DeleteBucket"
            - "DeleteTable"
            - "DeleteDistribution"
      Targets:
        - Arn: !GetAtt ResourceEventHandler.Arn
          Id: "ResourceEventHandlerTarget"

  # Permission for EventBridge to invoke Lambda
  ResourceEventHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ResourceEventHandler.Arn
      Principal: events.amazonaws.com

    # Example for setting CloudFormation service role with permissions
  CloudFormationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CFNServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationEventBridgePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:DescribeRule
                  - events:PutRule
                  - events:DeleteRule
                  - events:PutTargets
                  - events:RemoveTargets
                Resource: "*"

